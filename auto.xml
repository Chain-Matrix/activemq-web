<div class="wiki-content maincontent"><p>Starting with version 5.13.0, ActiveMQ supports wire format protocol detection. &#160; OpenWire, STOMP, AMQP, and MQTT can be automatically detected. &#160;This allows one transport to be shared for all 4 types of clients.</p><h3>Enabling AUTO over TCP</h3><p>To configure ActiveMQ auto wire format detection over a TCP connection use the&#160;<code>auto</code>&#160;transport prefix. For example, add the following transport configuration in your XML file:</p><structured-macro ac:macro-id="1b2eaa95-2237-4062-85d0-8f9e9566e4ce" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto" uri="auto://localhost:5671"/&gt;</plain-text-body></structured-macro><h3>Enabling AUTO over SSL</h3><p>To configure ActiveMQ auto wire format detection over an SSL connection use the&#160;<code>auto+ssl</code>&#160;transport prefix. For example, add the following transport configuration in your XML file:</p><structured-macro ac:macro-id="8fb394d9-660b-4afa-8246-ffef07fecf32" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto+ssl" uri="auto+ssl://localhost:5671"/&gt;
</plain-text-body></structured-macro><ul><li>For more details on using SSL with ActiveMQ, see the following article (<a shape="rect" href="http://activemq.apache.org/how-do-i-use-ssl.html">How do I use SSL</a>).</li></ul><h3>Enabling AUTO over NIO</h3><p>To configure ActiveMQ auto wire format detection over an NIO TCP connection use the&#160;<code>auto+nio</code>transport prefix. For example, add the following transport configuration in your XML file:</p><structured-macro ac:macro-id="d64978dd-16ac-4473-8c2d-e077b8e0e8da" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto+nio" uri="auto+nio://localhost:5671"/&gt;</plain-text-body></structured-macro><h3>Enabling AUTO over NIO SSL</h3><p>To configure ActiveMQ auto wire format detection over an NIO SSL connection use the&#160;<code>auto+nio+ssl</code>&#160;transport prefix. For example, add the following transport configuration in your XML file:</p><structured-macro ac:macro-id="45956eda-207b-439f-85f8-45fb5cd8b09d" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto+nio+ssl" uri="auto+nio+ssl://localhost:5671"/&gt;</plain-text-body></structured-macro><h3>Configuring AUTO Transport Options</h3><p>There are some configuration options that can be set.</p><table><tbody><tr><th colspan="1" rowspan="1"><p>Parameter Name</p></th><th colspan="1" rowspan="1">Default Value</th><th colspan="1" rowspan="1"><p>Description</p></th></tr><tr><td colspan="1" rowspan="1"><p>protocolDetectionTimeOut</p></td><td colspan="1" rowspan="1"><p>30000</p></td><td colspan="1" rowspan="1"><p>The time before a connection times out in milliseconds. This is similar to maxInactivityDuration. If a client makes a connection to but doesn't send data or enough data for the protocol to be detected then the thread will sit and wait for more data to come in over the socket. This will let the broker kill the connections if they do not complete the protocol initialization after a certain period of time. The default is 30 seconds. Set a default to &lt;= 0 to disable this.</p></td></tr><tr><td colspan="1" rowspan="1"><p>maxConnectionThreadPoolSize</p></td><td colspan="1" rowspan="1"><p>MAX_INT</p></td><td colspan="1" rowspan="1"><p>This option allows the configuration of the maximum size of the thread pool that handles connection attempts. Lowering this number can help prevent the broker from running out of threads if there are many different clients attempting to connect at the same time. By default it is turned off by setting to MAX_INT</p></td></tr></tbody></table><p><br clear="none">An example that configures the transport with a maximum protocol detection time of 5 seconds:</p><structured-macro ac:macro-id="2f645d3e-dbec-42b6-b5ad-c6043c0d1d72" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto" uri="auto://localhost:5671?protocolDetectionTimeOut=5000"/&gt;</plain-text-body></structured-macro><h3>Configuring Wire Formats</h3><p>OpenWire is the default Wire Format that ActiveMQ uses.&#160; It provides a highly efficent binary format for high speed messaging.&#160; OpenWire options can be configured on a JMS client's connection URI string or on a Brokers transport bind URI.</p><table><tbody><tr><th colspan="1" rowspan="1"><p>Parameter Prefix</p></th><th colspan="1" rowspan="1"><p>Description</p></th></tr><tr><td colspan="1" rowspan="1"><p>wireFormat.</p></td><td colspan="1" rowspan="1"><p>Applies the option to all wire formats.</p></td></tr><tr><td colspan="1" rowspan="1"><p>wireFormat.default.</p></td><td colspan="1" rowspan="1"><p>Applies the option to the default format which is OpenWire</p></td></tr><tr><td colspan="1" rowspan="1"><p>wireFormat.stomp.</p></td><td colspan="1" rowspan="1"><p><span>Applies the option to the STOMP wire format</span></p></td></tr><tr><td colspan="1" rowspan="1"><p><span>wireFormat.amqp.</span></p></td><td colspan="1" rowspan="1"><p><span>Applies the option to the AMQP<span> wire format</span></span></p></td></tr><tr><td colspan="1" rowspan="1"><p>wireFormat.mqtt.</p></td><td colspan="1" rowspan="1"><p><span>Applies the option to the MQTT<span> wire format</span></span></p></td></tr></tbody></table><p>&#160;</p><p>An example of a property that applies to all formats:</p><structured-macro ac:macro-id="74a2a3a1-104d-440d-8639-b25f6efe924f" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto" uri="auto://localhost:5671?wireFormat.maxFrameSize=1000"/&gt;</plain-text-body></structured-macro><p>&#160;</p><p>An example of a property only applied to OpenWire would be:</p><structured-macro ac:macro-id="1098c525-7508-4399-954f-3b02ab7b1994" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto" uri="auto://localhost:5671?wireFormat.default.maxFrameSize=1000"/&gt;</plain-text-body></structured-macro><h3>Configuring Enabled Wire Protocols</h3><p>By default all wire protocols are available. &#160;This can be configured to only enable certain formats by setting the property &#160;auto<code>.protocols.</code>&#160;</p><table><tbody><tr><th colspan="1" rowspan="1"><p>Value</p></th><th colspan="1" rowspan="1"><p>Description</p></th></tr><tr><td colspan="1" rowspan="1"><p>default</p></td><td colspan="1" rowspan="1"><p>Enables OpenWire</p></td></tr><tr><td colspan="1" rowspan="1"><p>amqp</p></td><td colspan="1" rowspan="1"><p>Enables AMQP format</p></td></tr><tr><td colspan="1" rowspan="1"><p>stomp</p></td><td colspan="1" rowspan="1"><p>Enables STOMP format</p></td></tr><tr><td colspan="1" rowspan="1"><p>mqtt</p></td><td colspan="1" rowspan="1"><p>Enables MQTT format</p></td></tr></tbody></table><p>&#160;</p><p>An example showing only OpenWire and STOMP enabled:</p><structured-macro ac:macro-id="2cc70f63-d57a-470e-848d-b8a7d05d4d06" ac:name="code" ac:schema-version="1"><parameter ac:name="">xml</parameter><plain-text-body>     &lt;transportConnector name="auto" uri="auto://localhost:5671?auto.protocols=default,stomp"/&gt;</plain-text-body></structured-macro></div>

