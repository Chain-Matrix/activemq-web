<div class="wiki-content maincontent"><ul><li>Supports a variety of <link><page ri:content-title="Cross Language Clients"></page><plain-text-link-body>Cross Language Clients and Protocols</plain-text-link-body></link> from Java, C, C++, C#, Ruby, Perl, Python, PHP<ul><li><link><page ri:content-title="OpenWire"></page></link> for high performance clients in Java, C, C++, C#</li><li><link><page ri:content-title="Stomp"></page></link> support so that clients can be written easily in C, Ruby, Perl, Python, PHP, ActionScript/Flash, Smalltalk to talk to ActiveMQ as well as any other popular Message Broker</li><li><link><page ri:content-title="AMQP"></page></link> v1.0 support</li><li><link><page ri:content-title="MQTT"></page></link> v3.1 support allowing for connections in an IoT environment.</li></ul></li><li>full support for the <link><page ri:content-title="Enterprise Integration Patterns"></page></link> both in the JMS client and the Message Broker</li><li>Supports many <link><page ri:content-title="Features"></page><plain-text-link-body>advanced features</plain-text-link-body></link> such as <link><page ri:content-title="Message Groups"></page></link>, <link><page ri:content-title="Virtual Destinations"></page></link>, <link><page ri:content-title="Wildcards"></page></link> and <link><page ri:content-title="Composite Destinations"></page></link></li><li>Fully supports JMS 1.1 and J2EE 1.4 with support for transient, persistent, transactional and XA messaging</li><li><link><page ri:content-title="Spring Support"></page></link> so that ActiveMQ can be easily embedded into Spring applications and configured using Spring's XML configuration mechanism</li><li>Tested inside popular J2EE servers such as <a shape="rect" href="http://tomee.apache.org/">TomEE</a>, <a shape="rect" href="http://geronimo.apache.org/">Geronimo</a>, JBoss, GlassFish and WebLogic<ul><li>Includes <link><page ri:content-title="Resource Adapter"></page><plain-text-link-body>JCA 1.5 resource adaptors</plain-text-link-body></link> for inbound &amp; outbound messaging so that ActiveMQ should auto-deploy in any J2EE 1.4 compliant server</li></ul></li><li>Supports pluggable <link><page ri:content-title="URI Protocols"></page><plain-text-link-body>transport protocols</plain-text-link-body></link> such as <link><page ri:content-title="How do I use ActiveMQ using in JVM messaging"></page><plain-text-link-body>in-VM</plain-text-link-body></link>, TCP, SSL, NIO, UDP, multicast, JGroups and JXTA transports</li><li>Supports very fast <link><page ri:content-title="Persistence"></page><plain-text-link-body>persistence</plain-text-link-body></link> using JDBC along with a high performance journal</li><li>Designed for high performance clustering, client-server, peer based communication</li><li><link><page ri:content-title="REST"></page></link> API to provide technology agnostic and language neutral web based API to messaging</li><li><link><page ri:content-title="Ajax"></page></link> to support web streaming support to web browsers using pure DHTML, allowing web browsers to be part of the messaging fabric</li><li><link><page ri:content-title="Axis and CXF Support"></page><plain-text-link-body>CXF and Axis Support</plain-text-link-body></link> so that ActiveMQ can be easily dropped into either of these web service stacks to provide reliable messaging</li><li>Can be used as an in memory JMS provider, ideal for <link><page ri:content-title="How To Unit Test JMS Code"></page><plain-text-link-body>unit testing JMS</plain-text-link-body></link></li></ul></div>

